.. _whatsnew-0.2:

=========================
What's New in Astropy 0.2
=========================

Units and quantities
--------------------

:ref:`astropy-units` handles defining and converting between physical
units, and performing arithmetic with physical quantities (numbers
with associated units).

Units can be converted to one another:

  >>> from astropy import units as u
  >>> # Convert from parsec to meter
  >>> u.pc.to(u.m)
  3.0856776e+16

It also handles equivalencies that hold true in certain contexts, such
as that between wavelength and frequency::

  # Wavelength to frequency doesn't normally work
  >>> u.nm.to(u.Hz, [1000, 2000])
  UnitsException: 'nm' (length) and 'Hz' (frequency) are not convertible
  # ...but by passing an equivalency unit (spectral()), it does...
  >>> u.nm.to(u.Hz, [1000, 2000], equivalencies=u.spectral())
  array([  2.99792458e+14,   1.49896229e+14])

Also included in the `astropy.units` package is the
`~astropy.units.quantity.Quantity` object, which represents a
numerical value with an associated unit. These objects support
arithmetic with other numbers and `~astropy.units.quantity.Quantity`
objects and preserve units::

   >>> from astropy import units as u
   >>> 15.1*u.meter / (32.0*u.second)
   <Quantity 0.471875 m / (s)>
   >>> 3.0*u.kilometer / (130.51*u.meter/u.second)
   <Quantity 0.0229867443108 km s / (m)>
   >>> (3.0*u.kilometer / (130.51*u.meter/u.second)).simplify_units()
   <Quantity 22.9867443108 s>


VOTable XML support
-------------------

The name of the VOTable XML handling package has changed from
`astropy.io.vo` to `astropy.io.votable`.

The `unit` attribute is now an `astropy.units.Unit` object, so unit
conversions can easily be supported.  The CDS unit format used by
VOTable XML is now fully supported as a result.

Masked values are now handled by a single array, rather than a pair of
arrays.

The `precision` and `width` attributes of each field are now handled
correctly as per the VOTable XML specification.  This may result in
the output changing.

Each `TABLE` section of a `VOTable` XML file can be converted to/from
an `astropy.table.Table` object, which allows much easier editing of
the columns than a regular Numpy structured array.

A standalone `volint` script is available to validate the contents of
VOTable XML files.

The default setting for `pedantic` mode can be set using a
configuration parameter (`astropy.io.vo.PEDANTIC`).


WCS
---

When reading FITS headers, the default value of `relax` is `True`, in
order to accept all non-standard keywords that `wcslib` understands.
This should make `astropy.wcs` handle more FITS files by default, but
may introduce a change in behavior in some edge cases.  Likewise for
writing FITS headers, the default value of `relax` is `WCSHDO_safe`,
meaning it will write all non-standard exceptions that are considered
safe and unambiguous.  This should make the FITS files produced by
`astropy.wcs` supported by a larger range of third-party tools, but
may introduce changes in behavior in some edge cases.

The WCS transformation functions, when provided for a separate array
for each input axis, will now broadcast the arrays correctly and
return the output in the broadcasted shape.  This makes using a
constant for one of the axes possible.

The units in a WCS object (`CUNITij`) are now `astropy.units.Unit`
objects, so operations on those units may be performed.

The included version of `wcslib` has been upgraded to version 4.16.
